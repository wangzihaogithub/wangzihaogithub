---
layout: post
title:  "Pat 甲级 训练真题集 1123!"

---
# 1123. Is It a Complete AVL Tree (30)

​    时间限制  

​    400 ms

​    内存限制  

​    65536 kB

​    代码长度限制  

​    16000 B

​      判题程序    

​      Standard    

​      作者    

​      CHEN, Yue

An AVL tree is a self-balancing binary search tree.  In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property.  Figures 1-4 illustrate the rotation rules.

![img](https://www.patest.cn/upload/mr_ohesevgnyny.jpg)    ![img](https://www.patest.cn/upload/mr_ohesfdbkaep.jpg)

![img](https://www.patest.cn/upload/mr_oheseymzi13.jpg)    ![img](https://www.patest.cn/upload/mr_ohesfjddti2.jpg)

Now given a sequence of insertions, you are supposed to output the level-order traversal sequence of the resulting AVL tree, and to tell if it is a complete binary tree.

**Input Specification:**

Each input file contains one test case.  For each case, the first line contains a positive integer N (<= 20).  Then N distinct integer keys are given in the next line.  All the numbers in a line are separated by a space.

**Output Specification:**

For each test case, insert the keys one by one into an initially empty AVL tree.  Then first print in a line the level-order traversal sequence of the resulting AVL tree.  All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.  Then in the next line, print "YES" if the tree is complete, or "NO" if not.

Sample Input 1:

```
5
88 70 61 63 65

```

Sample Output 1:

```
70 63 88 61 65
YES

```

Sample Input 2:

```
8
88 70 61 96 120 90 65 68

```

Sample Output 2:

```
88 65 96 61 70 90 120 68
NO
```

[原文地址](http://www.liuchuo.net/archives/2732)

代码如下

```c++
#include<iostream>
#include<queue>
#include<vector>

using namespace std;




struct Node{
	int val;
	struct Node *left;
	struct Node *right;
};


int getHeight(struct Node*tree){
	if(tree==NULL) return 0;
	int l=getHeight(tree->left);
	int r=getHeight(tree->right);
	return l>r? l+1:r+1;
}

struct Node* leftRotate(struct Node*tree){
	struct Node *temp=tree->right;
	tree->right=temp->left;
	temp->left=tree;
	return temp;
}
struct Node*rightRotate(struct Node*tree){
	struct Node*temp=tree->left;
	tree->left=temp->right;
	temp->right=tree;
	return temp;
}

struct Node * leftRightRotate(struct Node*tree){
	tree->left=leftRotate(tree->left);
	tree=rightRotate(tree);
	return tree;
}
struct Node*rightLeftRotate(struct Node*tree){
	tree->right=rightRotate(tree->right);
	tree=leftRotate(tree);
	return tree;
}

struct Node * insert(struct Node*tree,int val){
	if(tree==NULL) {
		tree=new struct Node();
		tree->val=val;
		return tree;
	}
	if(val<tree->val){
		tree->left=insert(tree->left,val);
		int l=getHeight(tree->left);
		int r=getHeight(tree->right);
		if(l-r>=2){
			if(val<tree->left->val){
				tree=rightRotate(tree);
			}else{
				tree=leftRightRotate(tree);
			}
		}
	}else{
		tree->right=insert(tree->right,val);
		int l=getHeight(tree->left);
		int r=getHeight(tree->right);
		if(r-l>=2){
			if(val>tree->right->val){
				tree=leftRotate(tree);
			}else{
				tree=rightLeftRotate(tree);
			}
		}
	}
	return tree;
}
int isComplete=1,after=0;

vector<int> levelOrder(struct Node *tree){
	vector<int>v;
	queue<struct Node*> q;
	q.push(tree);
	while(!q.empty()){
		struct Node*temp=q.front();
		v.push_back(temp->val);
		q.pop();
		if(temp->left!=NULL){
			if(after){
				isComplete=0;
			}
			q.push(temp->left);
		}else{after=1;}
		if(temp->right!=NULL){
			if(after){
				isComplete=0;
			}
			q.push(temp->right);
		}else{after=1;}
	}
	return v;
}
void print(vector<int>v){
	for(int i=0;i<v.size();++i){
		if(i==0){
			printf("%d",v[i]);
		}else{
			printf(" %d",v[i]);
		}
	}
	printf("\n");
}

int main(){
	int n;
	scanf("%d",&n);
	struct Node*tree=NULL;
	int value;
	for(int i=0;i<n;++i){
		scanf("%d",&value);
		tree=insert(tree,value);
	}
	vector<int>v;
	v=levelOrder(tree);
	print(v);
	if(isComplete){
		printf("YES");
	}else{
		printf("NO");
	}
	return 0;
}
```

