---
layout: post
title:  "Pat 甲级 训练真题集 1078!"

---
# 1078. Hashing (25)

​    时间限制  

​    100 ms

​    内存限制  

​    65536 kB

​    代码长度限制  

​    16000 B

​      判题程序    

​      Standard    

​      作者    

​      CHEN, Yue

The task of this problem is simple: insert a sequence of distinct positive integers into a hash table, and output the positions of the input numbers.  The hash function is defined to be "H(key) = key % TSize" where TSize is the maximum size of the hash table.  Quadratic probing (with positive increments only) is used to solve the collisions.

Note that the table size is better to be prime.  If the maximum size given by the user is not prime, you must re-define the table size to be the smallest prime number which is larger than the size given by the user.

**Input Specification:**

Each input file contains one test case.  For each case, the first line contains two positive numbers: MSize (<=104) and N (<=MSize) which are the user-defined table size and the number of input numbers, respectively.  Then N distinct positive integers are given in the next line.  All the numbers in a line are separated by a space.

**Output Specification:**

For each test case, print the corresponding positions (index starts from 0) of the input numbers in one line.  All the numbers in a line are separated by a space, and there must be no extra space at the end of the line.  In case it is impossible to insert the number, print "-" instead.

Sample Input:

```
4 4
10 6 4 15

```

Sample Output:

```
0 1 4 -
```

最开始二次探测以为当二次大于size时便退出，没想到还要%size继续排列。。。。

尴尬。。所以一直最后的5分就没得到。。一直不知道错在哪，，然后看了网上的还发现当大于了仍然要%size后继续排列。。

代码如下：

```c++
#include<iostream>
#include<vector>
#include<map>
#include<set>
using namespace std;


bool isprime(int n){
	if(n==1)return false;
	if(n==2||n==3)return true;
	for(int i=2;i*i<=n;++i){
		if(n%i==0){
			return false;
		}
	}
	return true;
}
	vector<int> a(10010);
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	vector<int>v(m);
	for(int i=0;i<m;++i){
		scanf("%d",&v[i]);
	}

	if(isprime(n)==false){
		++n;
		while(isprime(n)!=true){
			++n;
		}
	}
	for(int i=0;i<m;++i){
		int val=v[i]%n;
		if(a[val]==0){
			a[val]=1;
			if(i!=0)printf(" ");
			printf("%d",val);
		}else{
			int index=1,flag=1;
			for(int index=1;index<n;++index){
				int key=(val+index*index)%n;
				if(a[key]==0){
					a[key]=1;
					flag=0;
					if(i!=0)printf(" ");
					printf("%d",key);
					break;
				}
			}
			if(flag==1){
				if(i!=0)printf(" ");
				printf("-");
			}		
		}
	}
	return 0;
}

```

