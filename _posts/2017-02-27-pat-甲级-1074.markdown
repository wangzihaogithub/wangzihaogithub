---
layout: post
title:  "Pat 甲级 训练真题集 1074!"

---
# 1074. Reversing Linked List (25)

​    时间限制  

​    400 ms

​    内存限制  

​    65536 kB

​    代码长度限制  

​    16000 B

​      判题程序    

​      Standard    

​      作者    

​      CHEN, Yue

Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L.  For example, given L being 1→2→3→4→5→6, if K = 3, then you must output 3→2→1→6→5→4; if K = 4, you must output 4→3→2→1→5→6.

**Input Specification:**

Each input file contains one test case.  For each case, the first line contains the address of the first node, a positive N (<= 105) which is the total number of nodes, and a positive K (<=N) which is the length of the sublist to be reversed.  The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.

Then N lines follow, each describes a node in the format:

*Address Data Next*

where *Address* is the position of the node, *Data* is an integer, and *Next* is the position of the next node.

**Output Specification:**

For each case, output the resulting ordered linked list.  Each node occupies a line, and is printed in the same format as in the input.

Sample Input:

```
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218

```

Sample Output:

```
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
```

此题主要是注意逆序点

我用的方法有点low，注意点如下，当i+k+k<=v.size()时便有下一次，若没有则输出i+k时的地址信息即可

代码如下：

```c++
#include<iostream>
#include<vector>
#include<queue>
using namespace std;


struct Node{
	int current;
	int data;
	int next;
}node[100000];

vector<Node> v;
int main(){
	int first,n,k;
	scanf("%d%d%d",&first,&n,&k);
	int current,data,next;
	for(int i=0;i<n;++i){
		scanf("%d %d %d",&current,&data,&next);
		node[current].data=data;node[current].next=next;
		node[current].current=current;
	}
	int index=first;
	while(index!=-1){	
		v.push_back(node[index]);
		index=node[index].next;
	}
	int i=0;
	for(;i+k<=v.size();i+=k){
		if(i+k!=v.size()){
			for(int j=i+k-1;j>=i;--j){	
				if(j!=i){
					printf("%05d %d %05d\n",v[j].current,v[j].data,v[j-1].current);
				}else{
					if(i+k+k<=v.size()){
						printf("%05d %d %05d\n",v[j].current,v[j].data,v[i+2*k-1].current);
					}else{
						printf("%05d %d %05d\n",v[j].current,v[j].data,v[i+k].current);
					}
				}	
			}
		}else{
			for(int j=i+k-1;j>=i;--j){		
				if(j!=i){
					printf("%05d %d %05d\n",v[j].current,v[j].data,v[j-1].current);
				}else{
					printf("%05d %d -1\n",v[j].current,v[j].data);
				}    
			
			}
		}	
	}
	for(;i<v.size();++i){
		if(i!=v.size()-1){
			printf("%05d %d %05d\n",v[i].current,v[i].data,v[i+1].current);
		}else{
			printf("%05d %d -1\n",v[i].current,v[i].data);
		}
	}
	return 0;
}
```
