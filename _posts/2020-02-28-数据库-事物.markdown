---
layout: post
title:  "数据库-事物"
tags: 数据库
---

### 前提 ACID原则

- 原子性（Atomicity） `commit指令, rollback指令`

      原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。

- 一致性（Consistency） `强一致,最终一致`

      事务前后数据的完整性必须保持一致。

- 隔离性（Isolation） `MVCC引擎`

      事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。

- 持久性（Durability） `redo日志,undo日志`

      持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响

 --- 
 
### 1.如何实现原子性(Atomicity)?

- commit指令
  
- rollback指令


### 2.如何实现一致性(Consistency)? 

- 强一致
  
        业界定义了XA分布式事物规范
        可以2阶段提交(2pc), 3阶段提交(3pc), 
        优点: 使用方便
        缺点: 但并发度不高,因为会阻塞,提交时要等所有方ack.
  
- 最终一致

        TCC(Try,Confirm,Cancel)补偿机制
        Try=业务逻辑,业务本身的.
        Confirm=提交改订单状态,业务本身的.
        Cancel=取消回滚,业务专门多写的代码.
        
        优点: 比XA并发度高, 因为不阻塞
        缺点: 入侵业务,需要自己实现补偿.

![XA_VS_TCC](../../../images/postimg/xa_vs_tcc.png)


### 3.如何实现隔离性(Isolation)? 

- MVCC引擎(多版本并发控制)
  

### 4.如何实现持久性（Durability）? 

**流程**

| 顺序写日志 | 日志刷盘策略(0定时刷盘fsync, 1事物结束刷盘fsync, 2事物结束写入write)|

- wal预写日志机制 - redo log(物理文件修改日志,增量的)
    
      通常是物理日志，记录的是数据页的物理修改，而不是某一行或某几行修改成怎样怎样，
      它用来恢复提交后的物理数据页(恢复数据页，且只能恢复到最后一次提交的位置)。

- wal预写日志机制 - undo log(回滚点)

      用来回滚行记录到某个版本。undo log一般是逻辑日志，根据每行记录进行记录。



