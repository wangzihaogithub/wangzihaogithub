---
layout: post
title:  "JVM-线上出问题的工具"
tags: JVM
---

**Oracle官网（垃圾收集器）**

[https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html](https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html "https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html")


### JVM可视化看盘 （直接CMD输入名字就行, 例如输入：jconsole， 这些工具是在 jdk/bin目录下）

    1. jconsole (一般)
    2. jvisualvm （好用）
    3. jmc （花哨）

### 查询java的GC信息

    jstat -gcutil 进程ID

    S0：幸存1区当前使用比例
    S1：幸存2区当前使用比例
    E：伊甸园区使用比例
    O：老年代使用比例
    M：元数据区使用比例
    CCS：压缩使用比例
    YGC：年轻代垃圾回收次数
    FGC：老年代垃圾回收次数
    FGCT：老年代垃圾回收消耗时间
    GCT：垃圾回收消耗总时间
    
### 查询哪个进程打开的文件句柄数最多

    lsof -n|awk '{print $2}'|sort|uniq -c|sort -nr|more

    lsof -p 进程id
    
### 导出系统信息 (进程, 内存, 磁盘, 网络)

    jps -l > 2020_01_11_00_55_jps.txt
    top -n 1 -b > 2020_01_11_00_55_top.txt
    free -h > 2020_01_11_00_55_free.txt
    df -h > 2020_01_11_00_55_df.txt
    netstat -nlatp > 2020_01_11_00_55_netstat.txt
    cp gc.log 2020_01_11_00_55_gc.log
    iostat -t > 2020_01_11_00_55_iostat_t.txt
    iostat -d -x -k 1 1 > 2020_01_11_00_55_iostat_d.txt
    
### 导出内存占用与类实例数量

    jmap -histo 12977 > 2020_01_11_00_28_histo.txt

###  导出线程状况

    jstack 12977 > 2020_01_11_00_55_thread.txt

### 导出堆信息 (只导出存活的对象)

    jmap -dump:live,format=b,file=heap_2020_01_11_00_59_dump.bin 12977