---
layout: post
title:  "Pat 甲级 训练真题集 1086!"

---
# 1086. Tree Traversals Again (25)

​    时间限制  

​    200 ms

​    内存限制  

​    65536 kB

​    代码长度限制  

​    16000 B

​      判题程序    

​      Standard    

​      作者    

​      CHEN, Yue

An inorder binary tree traversal can be implemented in a non-recursive way with a stack.  For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop().  Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.  Your task is to give the postorder traversal sequence of this tree.

![img](https://www.patest.cn/upload/bs_n9mde9jcnyj.jpg)
Figure 1

**Input Specification:**

Each input file contains one test case.  For each case, the first line contains a positive integer N (<=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N).  Then 2N lines follow, each describes a stack operation in the format: "Push X" where X is the index of the node being pushed onto the stack; or "Pop" meaning to pop one node from the stack.

**Output Specification:**

For each test case, print the postorder traversal sequence of the corresponding tree in one line.  A solution is guaranteed to exist.  All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:

```
6
Push 1
Push 2
Push 3
Pop
Pop
Push 4
Pop
Pop
Push 5
Push 6
Pop
Pop

```

Sample Output:

```
3 4 2 6 5 1
```

题意为找出后序遍历，从题中可以分析出其实就是先序和中序得出后序

代码如下：

```c++
#include<iostream>
#include<vector>
#include<stack>
#include<sstream>
#include<string>
using namespace std;
#define MAX 31;

vector<int> pre;
vector<int> in;

void print_post(int root,int start,int end){
	if(start>end) return;
	int i=start;
	for(;i<end;++i){
		if(in[i]==pre[root]){
			break;
		}
	}
	print_post(root+1,start,i-1);
	print_post(root+(i+1)-start,i+1,end);

	if(root!=0){
		printf("%d ",pre[root]);
	}else{
		printf("%d",in[i]);
	}
}

int main(){
	int n;
	scanf("%d",&n);
	getchar();
	string s;
	stack<int> sta;
	for(int i=0;i<2*n;++i){
		getline(cin,s);
		int node;
		if(s.size()>3){
			stringstream ss;			
			s.erase(0,4);
			ss<<s; ss>>node;
			sta.push(node);
			pre.push_back(node);
		}else{
			node=sta.top();
			sta.pop();
			in.push_back(node);
		}
	}
	print_post(0,0,n-1);
	return 0;
}
```

