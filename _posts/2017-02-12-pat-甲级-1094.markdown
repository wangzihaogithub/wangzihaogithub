---
layout: post
title:  "Pat 甲级 训练真题集 1094!"

---
# 1094. The Largest Generation (25)

​    时间限制  

​    200 ms

​    内存限制  

​    65536 kB

​    代码长度限制  

​    16000 B

​      判题程序    

​      Standard    

​      作者    

​      CHEN, Yue

A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation.  Your task is to find the generation with the largest population.

**Input Specification:**

Each input file contains one test case.  Each case starts with two positive integers N (<100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (<N) which is the number of family members who have children.  Then M lines follow, each contains the information of a family member in the following format:

ID K ID[1] ID[2] ... ID[K]

where ID is a two-digit number representing a family member, K (>0) is the number of his/her children, followed by a sequence of two-digit ID's of his/her children. For the sake of simplicity, let us fix the root ID to be 01.  All the numbers in a line are separated by a space.

**Output Specification:**

For each test case, print in one line the largest population number and the level of the corresponding generation.  It is assumed that such a generation is unique, and the root level is defined to be 1.  

Sample Input:

```
23 13
21 1 23
01 4 03 02 04 05
03 3 06 07 08
06 2 12 13
13 1 21
08 2 15 16
02 2 09 10
11 2 19 20
17 1 22
05 1 11
07 1 14
09 1 17
10 1 18

```

Sample Output:

```
9 4
```

BFS层次遍历，找出哪一层人数最多利用队列进行层次遍历，利用数组存储当前层人数

代码如下：

```c++
#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	vector<int>v[100];
	for(int i=0;i<m;++i){
		int father,num,child;
		scanf("%d%d",&father,&num);
		for(int j=0;j<num;++j){
			scanf("%d",&child);
			v[father].push_back(child);
		}
	}


	vector<int>final(n+1);
	vector<int>level(n+1);
	queue<int> qu;
	qu.push(1);
	level[1]=1;
	while(!qu.empty()){
		int index=qu.front();
		qu.pop();
		final[level[index]]++;
		for(int i=0;i<v[index].size();++i){
			level[v[index][i]]=level[index]+1;		
			qu.push(v[index][i]);		
		}
	}
	int maxnum=0,current=1;
	for(int i=1;i<n+1;++i){
		if(maxnum<final[i]){
			maxnum=final[i];
			current=i;
		}
	}
	printf("%d %d",maxnum,current);
	return 0;
}
```

